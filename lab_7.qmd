---
title: "Lab 7 - Logistic Regression"
author: "Madi Calbert"
date: "2024-02-20"
format: 
  html:
    embed-resources: true
    code-fold: true
    toc: true
execute:
  warning: false
  message: false
---

```{r setup}
library(tidyverse) 
library(here)
library(tidymodels) 
```

# Tidymodels with a classifier task

```{r load data}
t_df <- read_csv(here("data/titanic/titanic_survival.csv"))

surv_df <- t_df %>% 
  mutate(survived = factor(survived), 
         pclass = factor(pclass)) %>% 
  select(-cabin, -ticket, -parch, -sib_sp)
```


```{r data viz}
ggplot(surv_df, aes(x = pclass, fill = survived)) + 
  geom_bar()

ggplot(surv_df, aes(x = age, fill = survived)) + 
  geom_histogram()

ggplot(surv_df, aes(x = survived, y = fare)) + 
  geom_boxplot()
```
# Basic BLR in R

```{r blr}
f1 <- survived ~ sex + pclass + fare
f2 <- survived ~ passenger_id + embarked 

### binary logistic regression
### family = what type of linear model regression, we want binomial 
blr1 <- glm(formula = f1, data = surv_df, family = binomial)

### summary of our results
summary(blr1)
### negative value means that you are less likely to survive so males are -2.6
### Pclass 3 less likely to survive than pclass 2

blr2 <- glm(formula = f2, data = surv_df, family = binomial)

summary(blr2)
### passenger ID is a random number and not very helpful 
### embarked is significant b/c maybe collinear with class? 

table(t_df %>% select(embarked, pclass))
### embarked location is collinear with class 
```

### Pseudocode to compare models:

* purrr function to test all the models at once
* AIC or BIC to compare models 
* decide some arbitrary k-fold cross validation 
* making a function and using a map
* separating out training data and testing data and running RMSE --- won't be useful here becasue we are looking at categorical data 

# Using tidymodels

## Split the data

```{r split the data}
### Check the balance of the survivied column 

surv_df %>% 
  group_by(survived) %>% 
  summarize(n = n()) %>% 
  ungroup() %>% 
  mutate(prop = n / sum(n))


### splitting up our train and test groups so 80% will be the k-fold cross validation and 20% we will reserve 
set.seed(123) ### random number generator
surv_split <- initial_split(surv_df, prop = 0.8, strata = survived)

surv_train_df <- training(surv_split)
surv_test_df <- testing(surv_split)
```

## Basic Models w/ parsnip (in tidymodels)

```{r set up blr model with our data}
### similar to ggplot, it will start with a logisitic regression object, like how ggplot will start with a plot
blr_mdl <- logistic_reg() %>% 
  set_engine('glm') 

### now we can do a fit, fit the model to our data 
blr1_fit <- blr_mdl %>% 
  fit(formula = f1, data = surv_train_df)

garbage_fit <- blr_mdl %>% 
  fit(formula = f2, data = surv_train_df)

### Values are not exactly the same as before b/c we are only using 80% of the data
```

## Predict our testing data

```{r}
surv_test_predict <- surv_test_df %>% 
  mutate(predict(blr1_fit, new_data = surv_test_df)) %>% 
  mutate(predict(blr1_fit, new_data = surv_test_df, type = 'prob'))

table(surv_test_predict %>% 
        select(survived, .pred_class))

### confusion matrix - how confused would this predicted model be? 
```

```{r}
### or you can test it this way 
accuracy(surv_test_predict, truth = survived, estimate = .pred_class)
### about 80% accuracy 
roc_df <- roc_curve(surv_test_predict, truth = survived, .pred_0)
autoplot(roc_df)
### how well does it predict a value of zero
```


```{r}
garbage_test_predict <- surv_test_df %>% 
  mutate(predict(garbage_fit, new_data = surv_test_df)) %>% 
  mutate(predict(garbage_fit, new_data = surv_test_df, type = 'prob'))


accuracy(garbage_test_predict, truth = survived, estimate = .pred_class)
### about 80% accuracy 
garbage_roc <- roc_curve(garbage_test_predict, truth = survived, .pred_0)
autoplot(garbage_roc)

yardstick::roc_auc(surv_test_predict, truth = survived, .pred_0)
yardstick::roc_auc(garbage_test_predict, truth = survived, .pred_0)
```


## Tidymodels 

```{r}
set.seed(10101)
surv_train_folds <- vfold_cv(surv_train_df, v = 10)
```


```{r}
blr_mdl <- logistic_reg() %>% 
  set_engine('glm')

blr_wf <- workflow() %>% 
  add_model(blr_mdl) %>% 
  add_formula(survived ~ pclass + sex) 

### apply workflow to folds

blr_fit_folds <- blr_wf %>% 
  fit_resamples(surv_train_folds)

blr_fit_folds
collect_metrics(blr_fit_folds)
```












